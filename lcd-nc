#!/usr/bin/python

from Adafruit_CharLCDPlate import Adafruit_CharLCDPlate
from NotificationCenter import NotificationCenter
from time import sleep
import socket, os

lcd = Adafruit_CharLCDPlate(1)

NC_METHODS = {
    'status_date':     [lcd.WHITE,  30, '#FFFFFF'],
    'status_weather':  [lcd.TEAL,   30, '#00FFFF'],
    'fun1':            [lcd.RED,    5,  '#FF0000'],
    'status_torrents': [lcd.GREEN,  10, '#00FF00'],
    'status_disk':     [lcd.YELLOW, 10, '#FFFF00'],
    'random_quotes':   [lcd.VIOLET, 10, '#FF00FF'],
    }

# Functions for controlling LED light strip through servoblaster
def pwm(pin, angle):
    angle = checkmax(angle)
    cmd = "echo " + str(pin) + "=" + str(angle) + " > /dev/servoblaster"
    os.system(cmd)

def checkmax(angle): #PWM can only handle 249 units, so we're simply cutting the hex values 250-255 down to 249
    if angle > 249:
        angle = 249
    return angle

def setcolor(hex):
    pwm(5, int(hex[1:3],16))
    pwm(6, int(hex[3:5],16))
    pwm(2, int(hex[5:7],16))

lcd.clear()
lcd.backlight(lcd.RED)

nc = NotificationCenter()
lcd.message("\n".join(nc.startup()))
setcolor('#FF0000')
sleep(5)

""" Try to keep the weather request from tying things up """
socket.setdefaulttimeout(2)

while True:
    for NC_METHOD, (LCD_BK, NC_SLEEP, PWM_COLOR) in NC_METHODS.iteritems():
        res = getattr(nc, nc.STATIC_MODE or NC_METHOD)()
        if len(res):
            lcd.clear()
            lcd.message("\n".join(res))
            if not nc.STATIC_MODE:
                lcd.backlight(LCD_BK)
                setcolor(PWM_COLOR)
                sleep(NC_SLEEP)
            else:
                sleep(3)
